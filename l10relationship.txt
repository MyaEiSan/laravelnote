// =>Eloquent Relationships 

// =One to One 

= In Model User

public function article(){
    // Method 1
    // return $this->hasOne('App\Models\Article');

    // Method 2
    return $this->hasOne(Article::class);
}


= In Model (Article.php)


public function user(){
    // return $this->belongsTo('App\Models\User');
    return $this->belongsTo(User::class);
}


= In Web 

use App\Models\User;

Route::get('users/{id}/article', function($id){
    // $articles = User::findOrFail($id)->article->title;
    // $articles = User::findOrFail($id)->article->description;
    // $articles = User::findOrFail($id)->article->rating;

    return $articles;
});


Route::get('articles/{id}/user', function($id){
    $article = Article::findOrFail($id)->user->name;

    return $article;

});

------------------------------


= One to Many 

= In Model (User.php)

public function articles(){
        return $this->hasMany(Article::class);
    }


= In Web 

Route::get('articles/{id}/byuser', function($id){

    $user = User::findOrFail($id);
    // return $user->articles;

    foreach($user->articles as $article){
        echo $article."<br/>";
    }

    
});


------------------------------

// = Many to Many 

=Migration 

php artisan make:migration create_roles_table 
php artisan make:model Role 
(or)
php artisan make:migration create_roles_table --create="roles"
php artisan make:model Role 
(vs)
php artisan make:model Role -m 
$table->string('name');

=Obey by Laravel Naming Conversion 
php artisan make:migration create_roles_users_table --create="role_user"

 $table->unsignedBigInteger('user_id');
 $table->unsignedBigInteger('role_id');

php artisan migrate:status 
php artisan migrate 

=In Model (User.php)

 public function roles(){
        return $this->belongsToMany(Role::class);
    }

=In web 

Route::get('user/{id}/role', function($id){
     // $user = User::findOrFail($id);
    // return $user->roles;

    // $user = User::findOrFail($id);

    // foreach($user->roles as $role){
    //     echo $role->name."<br/>";
    // }

    $user = User::findOrFail($id)->roles()->orderBy('id','asc')->get();
    return $user;
});



=Migration 

php artisan migrate:rollback --pretend 
php artisan migrate:rollback 


php artisan make:migration create_users_roles_table --create="role_user"

 $table->unsignedBigInteger('user_id');
 $table->unsignedBigInteger('role_id');

php artisan migrate:status 
php artisan migrate 



=Migration 

php artisan migrate:rollback --pretend 
php artisan migrate:rollback 


php artisan make:migration create_users_roles_table --create="userroles"

 $table->unsignedBigInteger('user_id');
 $table->unsignedBigInteger('role_id');

php artisan migrate:status 
php artisan migrate

= In model (User.php)


public function roles(){

    return $this->belongsToMany(Role::class);

    // =For Custom Table Name 

    // belongsToMany(primarytable,secondarytable,secondarytable_fk,primarytable_fk)
    // belongsToMany(related,table,foreignPivotKey,relativePivotKey)

    return $this->belongsToMany(Role::class,'userroles','user_id','role_id');
}

// = belongsToMay with withPivot()
public function rolecreatedate(){
    // return $this->belongsToMany(Role::class)->withPivot('created_at'); // Error Base table or view not found : role_user doesn't exist

    return $this->belongsToMany(Role::class,'userroles','user_id','role_id')->withPivot('created_at');
}

= In web 

Route::get('user/{id}/rolecreatedate',function($id){
    $user = User::findOrFail($id);

    foreach($user->rolecreatedate as $role){
        echo $role->pivot->created_at."<br/>";
    }


}); 



----------------------------

// = Has Many Through Relationship 

=Migration 

php artisan make:model Gender -m 

$table->string('name');

=Add Column 
php artisan make:migration add_gender_id_to_users_table --table=users 
=up by sort 
$table->integer('gender_id')->after('password');
=down
$table->dropColumn('gender_id');

php artisan migrate :status
hpp artisan migrate 



=In Model (Gender.php)

public function articles(){

    // hasManyThrough(related,through)

    return $this->hasManyThrough(Article::class,User::class);

     // = hasManyThrough(related,table,firstkey,secondkey)
    return $this->hasManyThrough(Article::class,User::class,'gender_id','user_id');
}

=In Web 

Route::get('genders/{id}/article', function($id){

    $gender = Gender::findOrFail($id);

    foreach($gender->articles as $article){
        echo $article->title."<br/>";
    }

});


----------------------------


=>Polymorphic Relationship 

articles talbe 
id img cover caption

products 
id brand img cover caption 

users
id img 

photos 
id path imageable_id imageable_type 

php artisan make:model Photo -m 

$table->string('path');
$table->integer('imageable_id')->unsigned();
$table->integer('imageable_type')->unsigned();

php artisan migrate:status 
php artisan migrate 

= Migration 

= In Model (User.php)

    public function  photos(){
        // morphMany(relatedtable,name);
        return $this->morphMany(Photo::class,'imageable');
    }

= In Model (Article.php)

    public function  photos(){
        // morphMany(relatedtable,name);
        return $this->morphMany(Photo::class,'imageable');
    }
    

= In Web

Route::get('users/{id}/photo', function($id){

    $user = User::findOrFail($id);
    
    foreach($user->photos as $photo){
        echo $photo->path. "<br/>";
    }
    
});

Route::get('articles/{id}/photo', function($id){

    $article = Article::findOrFail($id);
    
    foreach($article->photos as $photo){
        echo $photo->path. "<br/>";
    }
    
});


-------

= Reverse Thinking 

=In Model (Photo.php)

Note::table မှာ  imageable_id imageable_type လို့ပေးထားလို့ imageable လို့ရေးရတာ

Note::table မှာ  imageable_id imageable_type လို့ပေးထားပြီး function name ကို imageable မဟုတ်တဲ့ တခြားဟာပေးရင် morphTo မှာ အမှန်ဖြစ်တဲ့ imageable ထည့်ပေးရတယ်။ 


public function imageable(){
    // morphTo();
    return $this->morphTo();
}

 public function photoable(){
    // morphTo('name');
    return $this->morphTo('imageable');
}


=In Web 

Route::get('photos/{id}/result', function($id){

    // $photo = Photo::findOrFail($id);
    // return $photo->imageable;
    // return $photo->imageable->title;


    $photo = Photo::findOrFail($id);
    return $photo->photoable; 


});



---------


=Migration 

php artisan make:model Comment -m 

$table->string('message');
$table->integer('user_id')->unsigned();
$table->integer('commentable_id')->unsigned();
$table->string('commentable_type');

php artisan migrate:status 

php artisan migrate 


= In Model (User.php)

public function comments(){
    // morphMany(relatedtable,name);

    return $this->morphMany(Comment::class,'commentable');
}


= In Model (Article.php)

public function comments(){
    // morphMany(relatedtable,name);

    return $this->morphMany(Comment::class,'commentable');
}

= In Model (Comment.php)

public function commentable(){
    // morphTo();

    return $this->morphTo();
}


= In Web 

Route::get('articles/{id}/comment', function($id){
    $article = Article::findOrFail($id);

    foreach($article->comments as $comment){
        echo $comment->message."<br/>";
    }

});


Route::get('users/{id}/comment', function($id){
    $user = User::findOrFail($id);

    foreach($user->comments as $comment){
        echo $comment->message."<br/>";
    }

});



-----------------------------------

// => Polymorphic Relationship Many to Many 

// => Migration 

php artisan make:model Item -m 

$table->string('name');

php artisan make:model Tag -m 

$table->string('name');

php artisan make:model Taggable -m 

$table->integer('tag_id');
$table->integer('taggable_id');
$table->string('taggable_type');


php artisan migrate:status
php artisan migrate

= In Model (Article.php)

 public function tags(){
    // morphToMany(relatedtable,name);
    return $this->morphToMany(Tag::class,'taggable');
}

= In Model (Item.php)

 public function tags(){
    // morphToMany(relatedtable,name);
    return $this->morphToMany(Tag::class,'taggable');
}

= In Model (Tag.php)

 public function articles(){
    // morphedByMany(relatedtable,name);
    return $this->morphedByMany(Article::class,'taggable');
}

